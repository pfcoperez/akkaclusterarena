bind_address = 127.0.0.1
bind_address = ${?AKKA_CANARY_ADDR}

bind_port = 7891
bind_port = ${?AKKA_CANARY_PORT}


akka {

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${bind_address}
      port = ${bind_port}
    }
  }

  extensions = ["akka.cluster.client.ClusterClientReceptionist"]

  cluster {

    seed-nodes = ["akka.tcp://CanaryFlock@"${bind_address}":"${bind_port}]

    # Settings for the ClusterClientReceptionist extension
    client.receptionist {
      # Actor name of the ClusterReceptionist actor, /system/receptionist
      name = receptionist

      # Start the receptionist on members tagged with this role.
      # All members are used if undefined or empty.
      role = ""

      # The receptionist will send this number of contact points to the client
      number-of-contacts = 3

      # The actor that tunnel response messages to the client will be stopped
      # after this time of inactivity.
      response-tunnel-receive-timeout = 30s

      # The id of the dispatcher to use for ClusterReceptionist actors.
      # If not specified default dispatcher is used.
      # If specified you need to define the settings of the actual dispatcher.
      use-dispatcher = ""

      # How often failure detection heartbeat messages should be received for
      # each ClusterClient
      heartbeat-interval = 2s

      # Number of potentially lost/delayed heartbeats that will be
      # accepted before considering it to be an anomaly.
      # The ClusterReceptionist is using the akka.remote.DeadlineFailureDetector, which
      # will trigger if there are no heartbeats within the duration
      # heartbeat-interval + acceptable-heartbeat-pause, i.e. 15 seconds with
      # the default settings.
      acceptable-heartbeat-pause = 13s

      # Failure detection checking interval for checking all ClusterClients
      failure-detection-interval = 2s
    }

  }

}
